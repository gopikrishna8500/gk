1. Find the LCM and GCD of n numbers?
import java.util.Scanner;
public class ak
{
 static int gcd(int a,int b)
 {
 if(a==0)
 return b;
 return gcd(b%a,a);
 }
 static int findgcd(int a[], int n)
 {
 int res=a[0];
 for(int i=0;i<n;i++)
 {
 res=gcd(res,a[i]);
 if(res==1)
 return 1;
 }
 return res;
 }
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 int n=input.nextInt();
 int a[]=new int[n];
 for(int i=0;i<n;i++)
 {
 a[i]=input.nextInt();
 }
 System.out.println(findgcd(a,n));
 int gcd=findgcd(a,n);
 int mul=1;
 for(int i=0;i<n;i++)
 {
 mul=mul*a[i];
 }
 int lcm=mul/gcd;
 System.out.println(lcm);
 }
}


2.matrix addition?
Scanner input = new Scanner(System.in);
int mat1[][]={{1,2},{5,3}};
int mat2[][]={{2,3},{4,1}};
int mat_sum[][]=new int[2][2];
int len=mat1.length;
for(int i=0;i<len;i++)
{
 for(int j=0;j<len;j++)
 {
 mat_sum[i][j]=mat1[i][j]+mat2[i][j];
 System.out.print(mat_sum[i][j]+"\t");
 }
 }
 System.out.println();
}
Matrix multiplication
Scanner input=new Scanner(System.in);
int r=input.nextInt();
int c=input.nextInt();
int mat1[][]=new int[r][c];
int mat2[][]=new int[r][c];
for(int i=0;i<r;i++)
{
 for(int j=0;j<c;j++)
 {
 mat1[i][j]=input.nextInt();
 }
}
for(int i=0;i<r;i++)
{
 for(int j=0;j<c;j++)
 {
 mat2[i][j]=input.nextInt();
 }
}
int sum[][]=new int[r][c];
for(int i=0;i<r;i++)
{
 for(int j=0;j<c;j++)
 {
 sum[i][j]=0;
 for(int k=0;k<c;k++)
 {
 sum[i][j] = sum[i][j] +(mat1[i][k]*mat2[k][j]);
 }
 System.out.print(sum[i][j] + "\t");
 }
 System.out.println();
}

3.Mean, Median, Mode of the array of numbers?
Scanner input=new Scanner(System.in);
int a[]={16,18,27,16,23,21,19};
int len=a.length;
int sum=0;
for(int i=0;i<len;i++)
{
 sum=sum+a[i];
}
int mean=sum/len;
System.out.println("mean: "+mean);
for(int i=0;i<len;i++)
{
 for(int j=i+1;j<len;j++)
 {
 if(a[i]>a[j])
 {
 int temp=a[i];
 a[i]=a[j];
 a[j]=temp;
 }
 }
}
for(int i=0;i<len;i++)
{
 if(len%2==0)
 {
 int mid=len/2;
 System.out.print("median: "+a[mid-1]);
 break;
 }
 else
 {
 int mid=(len+1)/2;
 System.out.print(mid);
 System.out.println("median: "+a[mid-1]);
 break;
 }
}
for(int i=0;i<len;i++)
{
 for(int j=i+1;j<len;j++)
 {
 if(a[i]==a[j])
 {
 System.out.println("mode: "+a[i]);
 break;
 }
 }
}

4.write consonants and vowels separately in the given 

Scanner input=new Scanner(System.in);
String name=input.nextLine();
int len=name.length();
char a[]=new char[len];
char vow[]=new char[len];
char con[]=new char[len];
int v=0,c=0;
for(int i=0;i<len;i++)
{
 a[i]=name.charAt(i);
 if(a[i]=='a'||a[i]=='e'||a[i]=='i'||a[i]=='o'||a[i]=='u'
 ||a[i]=='A'||a[i]=='E'||a[i]=='I'||a[i]=='O'||a[i]=='U') {
 vow[v] = a[i];
 v++;
 }
 else {
 con[c] = a[i];
 c++;
 }
}
System.out.print("Consonants: ");
for(int i=0;i<v;i++)
{
 System.out.print(vow[i]);
}
System.out.print("\nvowels: ");
for(int j=0;j<c;j++)
{
 System.out.print(con[j]);
}

 
5.frequency of each element in the array.
import java.util.Arrays;
import java.util.Scanner;
public class ak {
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 int a[]=new int[] {1,2,8,3,2,2,2,5,1};
 int t[]=new int[a.length];
 int visited=-1;
 for(int i=0;i<a.length;i++)
 {
 int count=1;
 for(int j=i+1;j<a.length;j++)
 {
 if(a[i]==a[j])
 {
 count++;
t[j]=visited;
 }
 }
 if(t[i]!=visited)
 t[i]=count;
 }
 for(int i=0;i<a.length;i++)
 {
 if(t[i]!=visited)
 System.out.println(a[i]+" "+t[i]);
 }
 }
}


1. Write a Java Program to Convert a Given Number of Days in Terms of Years, Weeks 
& Days.
Sample Input&Output::
Enter the number of days:756
No. of years:2
No. of weeks:3
No. of days:5
Scanner input=new Scanner(System.in);
int num=input.nextInt();
int years=num/365;
System.out.println("years: "+years);
int weeks=(num%365)/7;
System.out.println("weeks: "+weeks);
int days=(num%365)%7;
System.out.println("Days: "+days);
Given a date, return the corresponding day of the week for that date.
The input is given as three integers representing the day, month and year respectively.
Return the answer as one of the following values {"Sunday", "Monday", "Tuesday", 
"Wednesday", "Thursday", "Friday", "Saturday"}.
Example 1:
Input: day = 31, month = 8, year = 2019
Output: "Saturday"
Example 2:
Input: day = 18, month = 7, year = 1999
Output: "Sunday"
Example 3:
Input: day = 15, month = 8, year = 1993
Output: "Sunday"
Constraints:
 The given dates are valid dates between the years 1971 and 2100.
2. Write a program to find the number of student users in the college, get the total users, 
staff users details from the client. Note for every 3 staff user there is one Non teaching 
staff user assigned by default. 
Sample Input:
Total Users: 856
Staff Users: 126
Sample Output:
Student Users: 688
Scanner input=new Scanner(System.in);
System.out.print("Total Users: ");
int total_user=input.nextInt();
System.out.print("Staff Users: ");
int staff_user=input.nextInt();
int non_tech=staff_user/3;
int student_user=total_user-(staff_user+non_tech);
System.out.println("Student Users: "+student_user);
3. Write a program to print number of factors and to print nth factor of the 
given number.
Sample Input:
Given Number: 100
N = 4
Sample Output:
Number of factors = 9
4
th factor of 100 = 5
Scanner input=new Scanner(System.in);
int num=input.nextInt();
int n=input.nextInt();
int a[]=new int[100];
int x=0;
for(int i=1;i<=num;i++)
{
 if(num%i==0) {
 a[x] = i;
 x++;
 }
}
System.out.println("Number of factors = "+x);
System.out.println(n+" factor of "+num+" = "+a[n-1]);
4. Write a program to print n prime numbers after n
th Prime number
Sample Input:
N = 3
Sample Output:
3
rd
 Prime number is 5
3 prime numbers after 5 are: 7, 11, 13
Scanner input=new Scanner(System.in);
int n=input.nextInt();
int a[]=new int[100];
int x=0;
for(int i=2;i<=100;i++)
{
 int fact=0;
 for(int j=1;j<=i;j++)
 {
 if(i%j==0)
 fact++;
 }
 if(fact==2) {
 a[x] = i;
 x++;
 }
}
System.out.println(n+" prime number is "+a[n-1]);
System.out.print(n+" prime numbers after "+a[n-1]+" are: ");
for(int i=n;i<n+n;i++)
{
 System.out.print(a[i]+" ");
}
5. Write a Program to create a list of all numbers in a range which are perfect 
squares and the sum of the digits of the number is less than 10.
Sample Input & Output:
Enter lower range: 1
Enter upper range: 40
[1, 4, 9, 16, 25, 36] 
import java.util.Scanner;
public class ak {
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 int lower=input.nextInt();
 int upper=input.nextInt();
 int i=0,x=1;
 while(i<upper)
 {
 int sum=0;
 int y=x*x;
 int t=y;
 while(y!=0)
 {
 int rem=y%10;
 sum=sum+rem;
 y=y/10;
 }
 if(sum<10)
 {
 System.out.print(t+" ");
 }
 i=x*x;
 x++;
 }
 }
}
Test case:
1. Enter lower range: 50
Enter upper range: 100
2. Enter lower range: 5
Enter upper range: 8
3. Enter lower range: 10
Enter upper range: 5
4. Enter lower range: 500
Enter upper range: 500
5. Enter lower range: 0
Enter upper range: -100
6. Write a program to print unique permutations of a given number
Sample Input:
Given Number: 143
Sample Output:
Permutations are:
134
143
314
341
413
431
import java.util.Scanner;
public class ak
{
 public static void print(int a[])
 {
 for(int i=0;i<a.length;i++)
 {
 System.out.print(a[i]+" ");
 }
 System.out.println();
 }
 public static void swap(int a[],int i,int j)
 {
 int temp=a[i];
 a[i]=a[j];
 a[j]=temp;
 }
 public static void per(int a[],int t)
 {
 if(t==a.length)
 {
 print(a);
 return;
 }
 for(int i=t;i<a.length;i++)
 {
 swap(a,i,t);
 per(a,t+1);
 swap(a,i,t);
 }
 }
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 int a[]={1,4,3};
 per(a,0);
 }
}
Test cases:
1. 0
2. 111
3. 505
4. -143
5. -598
7. Write a Program to create an array with the First Element as the Number and 
Second Element as the Square of the Number.
Sample Input:
Enter the lower range:45
Enter the upper range:49
Sample Output:
[(45, 2025), (46, 2116), (47, 2209), (48, 2304), (49, 2401)]
Scanner input=new Scanner(System.in);
int lower=input.nextInt();
int upper= input.nextInt();
for(int i=lower;i<=upper;i++)
{
 System.out.println("("+i+","+(i*i)+")"+" ");
}
Test case:
1. Enter lower range: 50
Enter upper range: 100
2. Enter lower range: 5
Enter upper range: 8
3. Enter lower range: 10
Enter upper range: 5
4. Enter lower range: 500
Enter upper range: 500
5. Enter lower range: 0
Enter upper range: -100
8. Develop a JAVA code to display the balance. Include the following members: 
 Design a class to represent a bank account.
 Data Members: Name of the depositor, Account number, Type of 
account(Savings/Current), Balance amount in the account(Minimum balance is 
Rs.500.00) 
 Methods: 
1. To read account number, Depositor name, Type of account.
2. To deposit an amount (Deposited amount should be added with it) 
3. To withdraw an amount after checking balance(Minimum balance must be 
Rs.500.00
Note : Assume that balance amount = 10000
Test Cases
1. 100, Raja, S, 8000
2. Raja, 100, S, 9000
3. 101, Rani, S, 12000
4. 102, Ragu, W, 8000
5. 103, Ravi, C, 10000
6. import java.util.Scanner;
class Bank_Account
{
 String name,type;
 int acc_num;
 double bal;
 Bank_Account(String n,int a,String t,double b)
 {
 name=n;
 acc_num=a;
 type=t;
 bal=b;
 }
 void deposit(double d)
 {
 if(d>0)
 bal=bal+d;
 else
 System.out.println("Invalid amt");
 }
 void withdraw(double w)
 {
 if(w>0 && w<=bal)
 bal=bal-w;
 else
 System.out.println("Invalid amt");
 }
 void display()
 {
 System.out.println("Name: "+name);
 System.out.println("balance: "+bal);
 }
}
public class ak
{
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 String n,t;
 int a;
 double b;
 System.out.print("Enter the name: ");
 n=input.next();
 System.out.print("Enter Account number: ");
 a=input.nextInt();
 System.out.print("Enter the type of account: ");
 t= input.next();
 System.out.print("Enter the balance amt: ");
 b=input.nextInt();
 Bank_Account bank=new Bank_Account(n,a,t,b);
 bank.display();
 }
}
9. Develop a code to Reverse and Add a Number until you get a Palindrome.
Sample Input If 7325 is input number, then
7325 (Input Number) + 5237 (Reverse Of Input Number) = 12562
12562 + 26521 = 39083
39083 + 38093 = 77176
77176 + 67177 = 144353
 144353 + 353441 = 497794 (Palindome) 
import java.util.Scanner;
public class ak
{
 public static int revnum(int num)
 {
 int rev=0;
 while(num!=0)
 {
 int rem=num%10;
 rev=rev*10+rem;
 num=num/10;
 }
 return rev;
 }
 public static boolean check(int num)
 {
 int rev= revnum(num);
 if(num==rev)
 return true;
 else
 return false;
 }
 public static void add(int num)
 {
 if(check(num)) {
 System.out.println("palindrome");
 }
 else
 {
 while(!check(num))
 {
 int rev=revnum(num);
 int sum=num+rev;
 System.out.println(num+"+"+rev+"="+sum);
 num=sum;
 }
 }
 }
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 int num=input.nextInt();
 add(num);
 }
}
Test Cases
1. 8765
2. -8765
3. 0
4. EIGHT FIVE
5. 87.57 
10. Create Customer class with deposit() and withdraw() as synchronized methods. Declare 
AccountNo, AccName and Balance as Instance Variables inside the class. From the main 
class, Input the amount for withdraw() operation and if requested amount is not available in 
existing Balance amount, withdraw() method should be temporarily suspended using wait() 
method until deposit() method receives the input for amount, to be added in the existing 
Balance amount and then withdraw() would be completed in a successful manner. Develop 
the above scenario using Synchronization and Inter-Thread Communication.
Note : existing Bank balance amount 10000
Sample Input : 12000, 3000
Sample Output : Withdraw operation success, balance amount 1000
Test Cases
1. 11000, 4000
2. -10000, -2000
3. 0, 0
4. EIGHT SEVEN, FIVE
5. 100.67, 200.68
11. Given an integer n, return a string array answer (1-indexed) where:
answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.
Example 1:
Input: n = 3
Output: ["1","2","Fizz"]
int n;
Scanner sc=new Scanner(System.in);
System.out.println("enter the value of n: ");
n= sc.nextInt();
for(int i= 1;i<=n;i++){
 if(i%3==0 && i%5==0){
 System.out.println("FIZZ BUSS");
 }
 else if(i%3==0){
 System.out.println("FIZZ");
 }
 else if(i%5==0){
 System.out.println("BUSS");
 }
 else {
 System.out.println(i);
 }
}
Test Case
Test Case Inputs
1. n = 5
2. n = 10
3. n = 12
4. n = 18
5. n = 20
12. Write a Java program to find the common elements in two array of Positive 
integer
Sample Input:
[1, 2, 3, 4]
[2, 4, 5, 6, 7]
Expected output: [2, 4]
int a[]=new int[]{1,2,3,4};
int b[]=new int[]{2,4,2,6,7};
int len=b.length;
for(int i=0;i<len;i++)
{
 for(int j=i+1;j<len;j++)
 {
 if(b[i]==b[j])
 {
 for(int k=j;k<len-1;k++)
 {
 b[k]=b[k+1];
 }
 j--;
 len--;
 }
 }
}
for(int i=0;i<a.length;i++)
{
 for(int j=0;j<len;j++)
 {
 if(a[i]==b[j]) {
 System.out.print(a[i]);
 }
 }
}
Test Case
Test Case Inputs-1 Inputs-2
1. [1, 2, 3, 4] [4,5,6,7,8]
2. [a, b, c, d] [a, b, c, d]
3. [1, -2, 3, 4] [1,-2,5,7,8]
4. [@, #, 34, 45] [@,#,%,$,]
5. [45,78,56,89] [92,34,56,-78,-90]
13. Given a string s consisting of words and spaces, return the length of the last word
in the string. A word is a maximal substring consisting of non-space characters only. 
There will be at least one word, consists of only English letters and spaces ' '. 
Example 1:
Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
Scanner sc=new Scanner(System.in);
int wl=0;
System.out.println("enter the string: ");
String s1=sc.nextLine();
String w[]=s1.split(" ");
if(w.length>0){
 wl=w[w.length-1].length();
}
else{
 wl=0;
}
System.out.println("length is: "+ wl);
Test Case
Test Case Inputs-1
1. Maximal Substring Consisting
2. lea@st one wor2d
3. 1254 98076
4. & * ( ) % # $
5. letters and spaces
14. Write a program to read a character until a * is encountered. Also count the number of 
uppercase, lowercase, and numbers entered by the users.
Sample Input:
Enter * to exit…
Enter any character: W
Enter any character: d
Enter any character: A
Enter any character: G
Enter any character: g
Enter any character: H
Enter any character: *
Sample Output:
Total count of lower case:2
Total count of upper case:4
Total count of numbers =0
Test Case
Test Case Inputs-1
1. 1,7,6,9,5
2. S, Q, l, K,7, j, M
3. M, j, L, &, @, G
4. D, K, I, 6, L, *
5. *, K, A, e, 1, 8, %, *
15. Roman numerals are represented by seven different 
symbols: I, V, X, L, C, D and M.
Symbol Value
I 1
V 5
X 10
L 50
C 100
D 500
M 1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is 
written as XII, which is simply X + II. The number 27 is written as XXVII, which 
is XX + V + II.
Roman numerals are usually written largest to smallest from left to right. However, 
the numeral for four is not IIII. Instead, the number four is written as IV. Because 
the one is before the five we subtract it making four. The same principle applies to the 
number nine, which is written as IX. There are six instances where subtraction is 
used:
 I can be placed before V (5) and X (10) to make 4 and 9.
 X can be placed before L (50) and C (100) to make 40 and 90.
 C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.
Example:
Input: s = "III"
Output: 3
import java.util.Scanner;
public class ak
{
 public static int value(char c)
 {
 if(c=='I')
 return 1;
 if(c=='V')
 return 5;
 if(c=='X')
 return 10;
 if(c=='L')
 return 50;
 if(c=='C')
 return 100;
 if(c=='D')
 return 500;
 if(c=='M')
 return 1000;
 return -1;
 }
 public static int romantodecimal(String str)
 {
 int res=0;
 for(int i=0;i<str.length();i++)
 {
 int s1=value(str.charAt(i));
 if(i+1<str.length())
 {
 int s2=value(str.charAt(i+1));
 if(s1>=s2)
 res=res+s1;
 else
 {
 res=res+s2-s1;
 i++;
 }
 }
 else
 res=res+s1;
 }
 return res;
 }
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 String str=input.next();
 System.out.println(romantodecimal(str));
 }
}
Test Case Inputs
1. LVIII
2. MCMXCI
3. V
4. LZAII
5. MCCDTIV
16. Given two strings ransomNote and magazine, return true if ransomNote can be 
constructed by using the letters from magazine and false otherwise. Each letter in 
magazine can only be used once in ransomNote.
Example 1:
Input: ransomNote = "a", magazine = "b"
Output: false
import java.util.Scanner;
public class ak
{
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 System.out.print("RansomeNOte: ");
 String ransomenote=input.next();
 System.out.print("Magzine: ");
 String magazine=input.next();
 int t1[]=new int[ransomenote.length()];
 int t2[]=new int[magazine.length()];
 for(int i=0;i<ransomenote.length();i++)
 {
 t1[i]=ransomenote.charAt(i);
 }
 for(int i=0;i<magazine.length();i++)
 {
 t2[i]=magazine.charAt(i);
 }
 int len=ransomenote.length();
 int c=0;
 for(int i=0;i<ransomenote.length();i++)
 {
 for(int j=0;j<magazine.length();j++)
 {
 if(t1[i]==t2[j]) {
 c++;
break;
 }
 }
 }
 if(len==c)
 System.out.println("true");
 else
 System.out.println("false");
 }
}
Test Case
Test Case Inputs
1. ransomNote = "aa", magazine = "ab"
2. ransomNote = "aa", magazine = "aab"
3. ransomNote = "abc", magazine = "abc"
4. ransomNote = "good", magazine = "better"
5. ransomNote = "xyz", magazine = "123"
17. You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's 
(representing civilians). The soldiers are positioned in front of the civilians. That is, 
all the 1's will appear to the left of all the 0's in each row.
A row i is weaker than a row j if one of the following is true:
The number of soldiers in row i is less than the number of soldiers in row j.
Both rows have the same number of soldiers and i < j. Return the indices of the k 
weakest rows in the matrix ordered from weakest to strongest.
Example 1:
Input: mat = 
[[1,1,0,0,0],
[1,1,1,1,0],
[1,0,0,0,0],
[1,1,0,0,0],
[1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 2 
- Row 1: 4 
- Row 2: 1 
- Row 3: 2 
- Row 4: 5 
The rows ordered from weakest to strongest are [2,0,3,1,4].
import java.util.*;
class ak{
 public static void main(String[] args){
 Scanner a=new Scanner(System.in);
 System.out.println("enter no of rows");
 int row=a.nextInt();
 System.out.println("enter no of col");
 int col=a.nextInt();
 int arr[][]=new int[row][col];
 int arr1[]=new int[row];
 int arr2[]=new int[row];
 for(int i=0;i<row;i++){
 int c=0;
 for(int j=0;j<col;j++){
 arr[i][j]=a.nextInt();
 if(arr[i][j]==1){
 c++;
 }
 }
 arr1[i]=c;
 arr2[i]=c;
 }
 Arrays.sort(arr2);
 System.out.println("no of least elemnt index you want");
 int index=a.nextInt();
 List<Integer> li=new ArrayList<>();
 for(int i:arr2){
 for(int j=0;j<row;j++){
 if(i==arr1[j]){
 li.add(j);
 }
 }
 }
 for(int i=0;i<index;i++){
 System.out.print(li.get(i)+" ");
 }
 }
}
Example 2:
Input: mat = 
[[1, 0, 0, 0],
[1, 1, 1,1],
[1, 0, 0, 0],
[1, 0, 0,0]], 
k = 2
Output: [0,2]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 1 
- Row 1: 4 
- Row 2: 1 
- Row 3: 1 
The rows ordered from weakest to strongest are [0, 2, 3, 1].
18. Given an integer num, return the number of steps to reduce it to zero. In one step, if 
the current number is even, you have to divide it by 2, otherwise, you have to subtract 
1 from it.
Example 1:
Input: num = 14
Output: 6
Explanation: 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.
Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.
Scanner sc=new Scanner(System.in);
System.out.println("enter a number: ");
int n=sc.nextInt();
int s=0;
while(n>0){
 if(n%2==0){
 n=n/2;
 }
 else{
 n=n-1;
 }
 s=s+1;
}
System.out.println(s);
Test Case
Test Case Inputs
1. n = 5
2. n = 10
3. n = 12
4. n = 18
5. n = 20



1. Write a program to count all the prime and composite numbers entered by the user.
Sample Input:
Enter the numbers 
4
54
29
71
7
59
98
23
Sample Output:
Composite number:3
Prime number:5
int arr[]={4,54,29,71,7,59,98,23};
int com=0,pri=0;
for(int i=0;i<arr.length;i++)
{
 int c=0;
 for(int j=1;j<arr[i];j++)
 {
 if(arr[i]%j==0)
 c++;
 }
 if(c>1)
 com++;
 else
 pri++;
}
System.out.print("Composite Number: "+com);
System.out.println("\nPrime number: "+pri);
2. Find the Mth maximum number and Nth minimum number in an array and then find 
the sum of it and difference of it.
Sample Input:
Array of elements = {14, 16, 87, 36, 25, 89, 34}
M = 1
N = 3
Sample Output:
1
stMaximum Number = 89
3
rdMinimum Number = 25
Sum = 114
Difference = 64
int arr[]={14, 16, 87, 36, 25, 89, 34};
int len=arr.length;
for(int i=0;i<len;i++) {
 for (int j = i + 1; j < len; j++) {
 if (arr[i] > arr[j]) {
 int temp = arr[i];
 arr[i] = arr[j];
 arr[j] = temp;
 }
 }
}
int m=1,n=3;
int max=arr[len-m];
int min=arr[n-1];
System.out.print(m+" maximum number = "+max);
System.out.print("\n"+n+" minimum number = "+min);
int sum=max+min;
int Diff=max-min;
System.out.print("\nSum = "+sum);
System.out.print("\nDifference = "+Diff);
3. Write a program to print the total amount available in the ATM machine with the 
conditions applied.
Total denominations are 2000, 500, 200, 100, get the denomination priority from the user 
and the total number of notes from the user to display the total available balance to the user
Sample Input:
Enter the 1st Denomination: 500
Enter the 1st Denomination number of notes: 4
Enter the 2nd Denomination: 100
Enter the 2nd
 Denomination number of notes: 20
Enter the 3rd
 Denomination: 200
Enter the 3rd
 Denomination number of notes: 32
Enter the 4th Denomination: 2000
Enter the 4th Denomination number of notes: 1
Sample Output:
Total Available Balance in ATM: 12400
int n1=500,d1=4,n2=100,d2=20,n3=200,d3=32,n4=2000,d4=1;
int Total=(n1*d1)+(n2*d2)+(n3*d3)+(n4*d4);
System.out.print("Total Available Balance in ATM: "+Total);
4. Write a program using choice to check
Case 1: Given string is palindrome or not
Case 2: Given number is palindrome or not
Sample Input:
Case = 1
String = MADAM
Sample Output:
Palindrome
String s1="MADAM";
String s2="";
int len=s1.length();
for(int i=len-1;i>=0;i--)
{
 s2=s2+s1.charAt(i);
}
if(s1.equals(s2))
 System.out.print("Palindrome");
else
 System.out.print("Not palindrome");
5. Write a program to convert Decimal number equivalent to Binary number and octal 
numbers?
Sample Input:
Decimal Number: 15
Sample Output:
Binary Number = 1111
Octal = 17
int dec=15;
String bin=Integer.toBinaryString(dec);
String oct=Integer.toOctalString(dec);
System.out.println("Binary number = "+bin);
System.out.print("octal number = "+oct);
6. In an organization they decide to give bonus to all the employees on New Year. A 5% 
bonus on salary is given to the grade A workers and 10% bonus on salary to the grade 
B workers. Write a program to enter the salary and grade of the employee. If the salary 
of the employee is less than $10,000 then the employee gets an extra 2% bonus on 
salary Calculate the bonus that has to be given to the employee and print the salary that 
the employee will get.
Sample Input & Output:
Enter the grade of the employee: B
Enter the employee salary: 50000
Salary=50000
Bonus=5000.0
Total to be paid:55000.0
Scanner input=new Scanner(System.in);
int a,b;
double bonus=0;
System.out.print("Enter the grade of the employee :");
char a1=input.next().charAt(0);
System.out.print("Enter the salary of employee :");
int b1=input.nextInt();
if(a1=='A')
{
 bonus=b1*(0.05);
 if(b1<10000)
 {
 bonus=bonus+b1*(0.02);
 }
 System.out.println("salary = "+b1);
 System.out.println("bonus = "+bonus);
 System.out.println("total to be paid ="+(b1+bonus));
}
else if(a1=='B')
{
 bonus=b1*(0.1);
 if(b1<10000)
 {
 bonus=bonus+b1*(0.02);
 }
 System.out.println("salary = "+b1);
 System.out.println("bonus = "+bonus);
 System.out.println("total to be paid ="+(b1+bonus));
}
else {
 System.out.print("Enter valid grade");
}
7. Write a program to print the first n perfect numbers. (Hint Perfect number means a 
positive integer that is equal to the sum of its proper divisors)
Sample Input:
N = 3
Sample Output:
First 3 perfect numbers are: 6 , 28 , 496
Scanner input=new Scanner(System.in);
int n=input.nextInt();
int sum=0,temp=0;
for(int j=2;j<=1000;j++)
{
 if(n>temp)
 sum=1;
 for(int i=2;i<j;i++)
 {
 if(j%i==0)
 sum=sum+i;
 }
 if(sum==j)
 {
 System.out.print(j+" ");
 temp=temp+1;
 }
}
8. Write a program to print the first n perfect numbers. (Hint Perfect number means a 
positive integer that is equal to the sum of its proper divisors)
Sample Input:
N = 3
Sample Output:
First 3 perfect numbers are: 6 , 28 , 496
Scanner input=new Scanner(System.in);
int n=input.nextInt();
int sum=0,temp=0;
for(int j=2;j<=1000;j++)
{
 if(n>temp)
 sum=1;
 for(int i=2;i<j;i++)
 {
 if(j%i==0)
 sum=sum+i;
 }
 if(sum==j)
 {
 System.out.print(j+" ");
 temp=temp+1;
 }
}
9. Write a program to enter the marks of a student in four subjects. 
Then calculate the total and aggregate, display the grade obtained 
by the student. If the student scores an aggregate greater than 
75%, then the grade is Distinction. If aggregate is 60>= and <75, 
then the grade is First Division. If aggregate is 50 >= and <60, 
then the grade is Second Division. If aggregate is 40>= and <50, 
then the grade is Third Division. Else the grade is Fail.
Sample Input & Output:
Enter the marks in python: 90
Enter the marks in c programming: 91
Enter the marks in Mathematics: 92
Enter the marks in Physics: 93
Total= 366
Aggregate = 91.5
DISTINCTION
int a1=90;
int a2=91;
int a3=92;
int a4=93;
int total=(a1+a2+a3+a4) ;
float agg=total/4f;
System.out.println(total);
System.out.println(agg);
if(agg>75)
 System.out.println("DISTINCTION");
else if(agg>=60 && agg<75)
 System.out.println("First Division");
else if(agg>=50 && agg<60)
 System.out.println("Second Division");
else if(agg>=40 && agg<50)
 System.out.println("Third Division");
else System.out.println("Fail");
10.Write a program to calculate tax given the following conditions:
a. If income is less than or equal to 1,50,000 then no tax
b. If taxable income is 1,50,001 – 3,00,000 the charge 10% tax
c. If taxable income is 3,00,001 – 5,00,000 the charge 20% tax
d. If taxable income is above 5,00,001 then charge 30% tax
Sample Input:
Enter the income:200000
Sample Output:
Tax= 20000
Scanner input=new Scanner(System.in);
int income=input.nextInt();
float tax;
if(income<=150000)
 System.out.println("No tax");
else if(income>=150001 && income<=300000)
 System.out.println("Tax= "+income/10);
else if(income>=300001 && income<=500000)
 System.out.println("Tax= "+income/20);
else
 System.out.println("Tax= "+income/30);
11. Write a program to enter the marks of a student in four subjects. Then calculate the total 
and aggregate, display the grade obtained by the student. If the student scores an 
aggregate greater than 75%, then the grade is Distinction. If aggregate is 60>= and <75, 
then the grade is First Division. If aggregate is 50 >= and <60, then the grade is Second 
Division. If aggregate is 40>= and <50, then the grade is Third Division. Else the grade 
is Fail.
Sample Input & Output:
Enter the marks in python: 90
Enter the marks in c programming: 91
Enter the marks in Mathematics: 92
Enter the marks in Physics: 93
Total= 366
Aggregate = 91.5
DISTINCTION
int a1=90;
int a2=91;
int a3=92;
int a4=93;
int total=(a1+a2+a3+a4) ;
float agg=total/4f;
System.out.println(total);
System.out.println(agg);
if(agg>75)
 System.out.println("DISTINCTION");
else if(agg>=60 && agg<75)
 System.out.println("First Division");
else if(agg>=50 && agg<60)
 System.out.println("Second Division");
else if(agg>=40 && agg<50)
 System.out.println("Third Division");
else System.out.println("Fail");
12.Write a program to print the multiplication table of number m up to n.
Sample Input:
M = 4
N = 5
Sample Output:
1x4=4
2x4=8
3x4=12
4x4=16
5x4=20
int M=4;
int N=5;
for(int i=1;i<=N;i++)
{
 System.out.println(i+"x"+M+"="+(i*M));
}
13.Write a program to read the numbers until -1 is encountered. Find the 
average of positive numbers and negative numbers entered by user.
Sample Input:
Enter -1 to exit…
Enter the number: 7
Enter the number: -2
Enter the number: 9
Enter the number: -8
Enter the number: -6
Enter the number: -4
Enter the number: 10
Enter the number: -1
Sample Output:
The average of negative numbers is: -5.0
The average of positive numbers is : 8.66666667
int i=0,j=0;
int n=0;
int s1=0,s2=0;
int possum=0,negsum=0;
while(n!=-1)
{
 n=input.nextInt();
 if(n==-1)
 break;
 if(n>0)
 {
 i++;
 s1=s1+n;
 }
 else
 {
 j++;
 s2=s2+n;
 }
}
System.out.println(i);
System.out.println(j);
double pos=(s1/i);
double neg=s2/j;
System.out.println("The average of positive: "+pos);
System.out.println("The average of negative: "+neg);
Test cases:
1. -1,43, -87, -29, 1, -9
2. 73, 7-6,2,10,28,-1
3. -5, -9, -46,2,5,0
4. 9, 11, -5, 6, 0,-1
5. -1,-1,-1,-1,-1
14.Write a program to read a character until a * is encountered. Also count the 
number of uppercase, lowercase, and numbers entered by the users.
Sample Input:
Enter * to exit…
Enter any character: W
Enter any character: d
Enter any character: A
Enter any character: G
Enter any character: g
Enter any character: H
Enter any character: *
Sample Output:
Total count of lower case:2
Total count of upper case:4
Total count of numbers =0
Scanner input=new Scanner(System.in);
System.out.println("Enter * to exit....");
char c='0';
int lower=0,upper=0,digit=0;
while(c!='*')
{
 c=input.next().charAt(0);
 if(c>=65 && c<=90)
 upper=upper+1;
 else if(c>=97 && c<=122)
 lower=lower+1;
 else if(c>=48 && c<=57)
 digit=digit+1;
}
System.out.println("Lower: "+lower);
System.out.println("Upper: "+upper);
System.out.println("Digit: "+digit);
15.Write a program to calculate the factorial of number using recursive 
function.
Sample Input & Output:
Enter the value of n: 6
Sample Input & Output:
The factorial of 6 is: 720
Scanner input=new Scanner(System.in);
 int n=input.nextInt();
 int fact=1;
 for(int i=1;i<=n;i++)
 {
 fact=fact*i;
 }
 System.out.println("The factorial of "+n+" is: "+fact);
16.Write a Program to Find the Nth Largest Number in a array.
Sample Input:
List : {14, 67, 48, 23, 5, 62}
N = 4
Sample Output:
4
th Largest number: 23
Scanner input = new Scanner(System.in);
int a[] = {14, 67, 48, 23, 5, 62};
int len = a.length;
Arrays.sort(a);
int N = 4;
System.out.println(N + " Largest number: " + a[len-N]);
17.Write a program to convert the Binary to Decimal, Octal
Sample Input:
Given Number: 1101
Sample Output:
Decimal Number: 13
Octal:15
Scanner input=new Scanner(System.in);
String bin=input.nextLine();
int dec=Integer.parseInt(bin,2);
System.out.println("Decimal: "+dec);
String oct=Integer.toOctalString(dec);
System.out.println("Octal: "+oct);
18.Write a program to find the number of special characters in the given 
statement
Sample Input:
Given statement: Modi Birthday @ September 17, #&$% is the wishes code 
for him.
Sample Output:
Number of special Characters: 5
19.Write a Program to Remove the Duplicate Items from a array.
Sample Input:
Enter the number of elements in array:7
Enter element1:10
Enter element2:20
Enter element3:20
Enter element4:30
Enter element5:40
Enter element6:40
Enter element7:50
Sample Output:
Non-duplicate items:
[10, 20, 30, 40, 50]
Scanner input=new Scanner(System.in);
System.out.print("Enter the number of elements: ");
int n=input.nextInt();
int a[]=new int[n];
for(int i=0;i<n;i++)
{
 System.out.print("Enter element: ");
 a[i]=input.nextInt();
}
for(int i=0;i<n;i++)
{
 for(int j=i+1;j<n;j++)
 {
 if(a[i]==a[j])
 {
 for(int k=j;k<n-1;k++)
 {
 a[k]=a[k+1];
 }
 j--;
 n--;
 }
 }
}
for(int i=0;i<n;i++)
{
 System.out.print(a[i]+" ");
}
20. Bank is a class that provides method to get the rate of interest. But, rate of interest 
may differ according to banks. For example, SBI, ICICI and AXIS banks are 
providing 8.4%, 7.3% and 9.7% rate of interest. Write a Java program for above 
scenario.
Sample Input SBI, 8.4
Sample Output 
Test case 
1. SBI, 8.3
2. ICICI, 7.3
3. AXIS, 9.7
4. SBI, 8.6
5. AXIX, 7.6
class Bank
{
 float getROI()
 {
 return 0;
 }
}
class SBI extends Bank
{
 float getROI()
 {
 return 8.4f;
 }
}
class ICICI extends Bank
{
 float getROI()
 {
 return 8.4f;
 }
}
class AXIS extends Bank
{
 float getROI()
 {
 return 8.4f;
 }
}
public class ak {
 public static void main(String[] args) {
 Bank b;
 b = new SBI();
 System.out.println("SBI, " + b.getROI());
 }
}
21. Bring out the situation in which member names of a subclass hide members by the same 
name in the super class. How it can be resolved? Write Suitable code in Java and 
Implement above scenario with the Parametrized Constructor (accept int type 
parameter) of the Super Class can be called from Sub Class Using super () and display 
the input values provided.
Sample Input : 100, 200
Sample Output : 100, 200
import java.util.Scanner;
class abc
 {
 abc(int x,int y)
 {
 System.out.print(x+","+y);
 }
 }
 public class ak extends abc
 {
 ak(int x,int y)
 {
 super(x,y);
 }
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 int a1=input.nextInt();
 int b1=input.nextInt();
 ak obj=new ak(a1,b1);
 }
 }
22. Display Multiplication table for 5 and 10 using various stages of life cycle of the 
thread by generating a suitable code in Java.
Sample Input 5, 10
5 X 1 = 5
5 X 2 =10
….
10 X 1 =10
10 X 2 = 20
….
import java.util.Scanner;
class A extends Thread
{
 public void run()
 {
 int n=5;
 for(int i=1;i<=n;i++)
 {
 System.out.println(n+" X "+i+" = "+(n*i));
 }
 }
}
class B extends Thread
{
 public void run()
 {
 int n=10;
 for(int i=1;i<=n;i++)
 {
 System.out.println(n+" X "+i+" = "+(n*i));
 }
 }
}
public class ak
{
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 A threadA=new A();
 B threadB=new B();
 threadA.start();
 threadB.start();
 }
}
Test Cases:
1. 10, 20
2. -10, -30
3. 0, 0
4. SIX, SIX
5. 9.8, 9.6
23. Using the concepts of thread with implementing Runnable interface in Java to 
generate Fibonacci series.
Sample Input : 5 
Sample Output : 0 1 1 2 3 …..
Test Cases
1. 7
2. -10
3. 0
4. EIGHT FIVE
5. 12.65 
24. Generate a Java code to find the sum of N numbers using array and throw 
ArrayIndexOutOfBoundsException when the loop variable beyond the size N. 
Sample Input : 5 
1 2 3 4 5
Sample Output : 15
Test Cases
1. 4, 10
2. -10
3. 0
4. EIGHT SEVEN
5. 12.68 
25. Using the concepts of thread with implementing Runnable interface in Java to find 
whether a given number is prime or not.
Sample Input : 5 
Sample Output : 5 is Prime
Sample Output : 15
Test Cases
1. 4
2. -10
3. 0
4. EIGHT SEVEN
5. 11.48
o 26. Given a string s consisting of words and spaces, return the length of the last word
in the string. A word is a maximal substring consisting of non-space characters only. 
There will be at least one word, consists of only English letters and spaces ' '. 
Example 1:
Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
Test Case
Test Case Inputs-1
1. Maximal Substring Consisting
2. lea@st one wor2d
3. 1254 98076
4. & * ( ) % # $
5. letters and spaces
import java.util.Arrays;
import java.util.Locale;
import java.util.Scanner;
public class ak {
 public static void main(String[] args)
 {
 Scanner input=new Scanner(System.in);
 String name=input.next();
 name.split("NULL");
 name=name.trim();
 int len=0;
 for(int i=name.length()-1;i>=0;i--)
 {
 if(name.charAt(i)==' ')
 break;
 else
 len++;
 }
 System.out.println(len);
 }
}
